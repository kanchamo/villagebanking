generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum RequestType {
  LOAN
  PAYOUT
}

model Group {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  description        String
  maxMembers         Int
  contributionAmount Float
  rules              String[]
  adminId            String // Clerk user ID of the group admin
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  totalSavings       Float          @default(0)
  nextMeeting        DateTime?
  members            Member[]
  contributions      Contribution[]
  fundRequests       FundRequest[]
  joinRequests       JoinRequest[]
  payoutSchedules    PayoutSchedule[]
}

model Member {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  userId        String // Clerk user ID
  groupId       String         @db.ObjectId
  group         Group          @relation(fields: [groupId], references: [id])
  joinedAt      DateTime       @default(now())
  totalSavings  Float          @default(0)
  isAdmin       Boolean        @default(false)
  status        String         @default("ACTIVE") // ACTIVE, INACTIVE, SUSPENDED
  lastPayment   DateTime?
  contributions Contribution[]
  fundRequests  FundRequest[]
  joinRequests  JoinRequest[]
  notifications Notification[]
  requestApprovals RequestApproval[]
  memberPayouts  MemberPayout[]

  @@index([groupId])
  @@index([userId])
}

model Contribution {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  amount   Float
  date     DateTime @default(now())
  memberId String   @db.ObjectId
  member   Member   @relation(fields: [memberId], references: [id])
  groupId  String   @db.ObjectId
  group    Group    @relation(fields: [groupId], references: [id])
  status   String   @default("PENDING") // PENDING, COMPLETED, FAILED
  notes    String?

  @@index([memberId])
  @@index([groupId])
}

model FundRequest {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  type        RequestType
  amount      Float
  reason      String
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  groupId     String        @db.ObjectId
  group       Group         @relation(fields: [groupId], references: [id])
  memberId    String        @db.ObjectId
  member      Member        @relation(fields: [memberId], references: [id])
  approvals   RequestApproval[]
}

model RequestApproval {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  approved    Boolean
  createdAt   DateTime  @default(now())
  
  // Relations
  requestId   String    @db.ObjectId
  request     FundRequest @relation(fields: [requestId], references: [id])
  memberId    String    @db.ObjectId
  member      Member    @relation(fields: [memberId], references: [id])
}

model PayoutSchedule {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  status      RequestStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  groupId     String    @db.ObjectId
  group       Group     @relation(fields: [groupId], references: [id])
  payouts     MemberPayout[]
}

model MemberPayout {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  amount          Float
  percentage      Float
  status          RequestStatus @default(PENDING)
  
  // Relations
  scheduleId      String    @db.ObjectId
  schedule        PayoutSchedule @relation(fields: [scheduleId], references: [id])
  memberId        String    @db.ObjectId
  member          Member    @relation(fields: [memberId], references: [id])
}

model JoinRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String // Clerk user ID
  groupId   String   @db.ObjectId
  group     Group    @relation(fields: [groupId], references: [id])
  status    String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  message   String? // Optional message from the user requesting to join
  Member    Member?  @relation(fields: [memberId], references: [id])
  memberId  String?  @db.ObjectId

  @@index([groupId])
  @@index([userId])
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  type      String // JOIN_REQUEST, CONTRIBUTION, FUND_REQUEST, etc.
  userId    String // Clerk user ID of the recipient
  title     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  metadata  Json? // Additional data like groupId, requestId, etc.
  Member    Member?  @relation(fields: [memberId], references: [id])
  memberId  String?  @db.ObjectId
}
